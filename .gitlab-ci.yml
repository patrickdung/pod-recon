---
# Use Fedora image for buildah/podman
image: registry.fedoraproject.org/fedora:32
stages:
  - build-and-push
  - scan-containers
# rules:
#  - when: 'manual'
#    allow_failure: true
#    exists:
#      - Dockerfile

variables:
  # if use Docker
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-overlayfs-driver
  # DOCKER_DRIVER: overlay2
  # But Buildah can't use 'overlay' driver when running inside docker
  STORAGE_DRIVER: 'vfs'
  BUILDAH_FORMAT: 'docker'
  BUILDAH_ISOLATION: 'chroot'
  BASE_IMAGE: 'quay.io/almalinux/8-minimal:8.5'
  tag: "${CI_COMMIT_REF_SLUG}"

before_script:
  - dnf install -y --nodocs --setopt=install_weak_deps=False buildah podman skopeo runc qemu-user-binfmt jq
  # Newer versions of podman/buildah configured overlayfs mount options when
  # using the vfs driver, and this causes errors
  - sed -i '/^mountopt =.*/d' /etc/containers/storage.conf
  - |
    cat >> /etc/containers/libpod.conf << END
    cgroup_manager = "cgroupfs"
    events_logger = "file"
    END
  - podman run --rm --privileged docker.io/multiarch/qemu-user-static --reset -p yes
  - buildah login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"

build-and-push:
  stage: build-and-push
  script:
    # - buildah login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    # Newer versions of podman/buildah configured overlayfs mount options when
    # using the vfs driver, and this causes errors.
    - |
      # if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      #  tag=""
      #  echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      #else
      #  tag=":$CI_COMMIT_REF_SLUG"
      #  echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      #fi
        #tag="${CI_COMMIT_REF_SLUG}"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"

    - >
      buildah build-using-dockerfile --override-arch arm64
      --build-arg BASE_IMAGE="${BASE_IMAGE}"
      -t ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${tag}-arm64
    - >
      buildah build-using-dockerfile --override-arch amd64
      --build-arg BASE_IMAGE="${BASE_IMAGE}"
      -t ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${tag}-amd64
    - buildah manifest create ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${tag}
    - >
      buildah manifest add ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${tag}
      localhost/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${tag}-arm64
    - >
      buildah manifest add ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${tag}
      localhost/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${tag}-amd64
    - >
      buildah manifest push --all --format v2s2
      ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${tag} ${CI_REGISTRY_IMAGE}:${tag}
    # - buildah inspect ${CI_REGISTRY_IMAGE}:${tag}
    - skopeo inspect --raw docker://${CI_REGISTRY_IMAGE}:${tag} | jq

#  rules:
#    - when: 'manual'
#      allow_failure: true
#      exists:
#        - Dockerfile

scan-containers:
  stage: scan-containers
  dependencies: ["build-and-push"]
  script:
    # - skopeo inspect --raw docker://${CI_REGISTRY_IMAGE}:${tag}
    - skopeo inspect --raw docker://${CI_REGISTRY_IMAGE}:${tag} | jq -r '.manifests[] | select(.platform .architecture=="arm64" and .platform .os=="linux") | .digest' > /tmp/container-digest-arm64
    - skopeo inspect --raw docker://${CI_REGISTRY_IMAGE}:${tag} | jq -r '.manifests[] | select(.platform .architecture=="amd64" and .platform .os=="linux") | .digest' > /tmp/container-digest-amd64
    - export container_digest_arm64=$(cat /tmp/container-digest-arm64)
    - export container_digest_amd64=$(cat /tmp/container-digest-amd64)
    - podman run -it docker.io/anchore/grype:latest ${CI_REGISTRY_IMAGE}@:${container_digest_arm64} > /tmp/arm64-container-vulnerabilities-report-grype.json
    - podman run -it docker.io/anchore/grype:latest ${CI_REGISTRY_IMAGE}@:${container_digest_amd64} > /tmp/amd64-container-vulnerabilities-report-grype.json

  artifacts:
    expire_in: 1 hour
    paths:
      - /tmp/container-digest-arm64
      - /tmp/container-digest-amd64
